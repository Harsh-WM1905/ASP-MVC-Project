// <auto-generated />
using System;
using Bookstore.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Bookstore.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210611212716_PickUpTime")]
    partial class PickUpTime
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Bookstore.Models.BookModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("Autor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ISBN")
                        .HasColumnType("nvarchar(13)")
                        .HasMaxLength(13);

                    b.Property<string>("Publisher")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year_of_publish")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 30,
                            Amount = 20,
                            Autor = "Bogumiła Nowak",
                            Category = "Komedia",
                            ISBN = "2151638514413",
                            Publisher = "Nowa Era",
                            Title = "Tomek i przyjaciele",
                            Year_of_publish = 2008
                        },
                        new
                        {
                            Id = 31,
                            Amount = 20,
                            Autor = "Ireneusz Piotrowski",
                            Category = "Komedia",
                            ISBN = "0521159508353",
                            Publisher = "Nowa Era",
                            Title = "Niewiadoma Elvisa",
                            Year_of_publish = 1998
                        },
                        new
                        {
                            Id = 32,
                            Amount = 20,
                            Autor = "Serafina Tomaszewska",
                            Category = "Dziennik",
                            ISBN = "8161084125042",
                            Publisher = "Simon & Schuster",
                            Title = "Bogactwo McDonalda",
                            Year_of_publish = 1999
                        },
                        new
                        {
                            Id = 33,
                            Amount = 20,
                            Autor = "Marcelina Zawadzka",
                            Category = "Przygodowa",
                            ISBN = "9130177282184",
                            Publisher = "Simon & Schuster",
                            Title = "Zagadka Neila Armstronga",
                            Year_of_publish = 1948
                        },
                        new
                        {
                            Id = 34,
                            Amount = 20,
                            Autor = "Klaudiusz Symanski",
                            Category = "Przygodowa",
                            ISBN = "3107441797968",
                            Publisher = "Nowa Era",
                            Title = "Kod Gutenberga",
                            Year_of_publish = 1967
                        },
                        new
                        {
                            Id = 35,
                            Amount = 20,
                            Autor = "Klimek Dudek",
                            Category = "Science-Fiction",
                            ISBN = "5129929184934",
                            Publisher = "Hachette Livre",
                            Title = "Szarada Newtona",
                            Year_of_publish = 1912
                        },
                        new
                        {
                            Id = 36,
                            Amount = 20,
                            Autor = "Chad L. Lunceford",
                            Category = "Science-Fiction",
                            ISBN = "9779927736852",
                            Publisher = "Penguin Random House",
                            Title = "Fortuna Billa Gatesa",
                            Year_of_publish = 2012
                        },
                        new
                        {
                            Id = 37,
                            Amount = 20,
                            Autor = "John A. Rodriguez",
                            Category = "Science-Fiction",
                            ISBN = "2528844196531",
                            Publisher = "Macmillan Publishers",
                            Title = "Szyfr Einsteina",
                            Year_of_publish = 2005
                        },
                        new
                        {
                            Id = 38,
                            Amount = 20,
                            Autor = "Rebecca C. Michaels",
                            Category = "Romans",
                            ISBN = "4600695932095",
                            Publisher = "Macmillan Publishers",
                            Title = "Klejnot Forda",
                            Year_of_publish = 2010
                        },
                        new
                        {
                            Id = 39,
                            Amount = 20,
                            Autor = "Alejandro N. Woodson",
                            Category = "Romans",
                            ISBN = "5112456609535",
                            Publisher = "Penguin Random House",
                            Title = "Enigma Dionizosa",
                            Year_of_publish = 1992
                        },
                        new
                        {
                            Id = 40,
                            Amount = 20,
                            Autor = "Lori J. Pinkham",
                            Category = "Romans",
                            ISBN = "5906930426442",
                            Publisher = "Hachette Livre",
                            Title = "Precjoza Kolumba",
                            Year_of_publish = 1993
                        },
                        new
                        {
                            Id = 41,
                            Amount = 20,
                            Autor = "Charles L. Nevarez",
                            Category = "Romans",
                            ISBN = "4476558225443",
                            Publisher = "Penguin Random House",
                            Title = "Tajemnica Disneya",
                            Year_of_publish = 1978
                        });
                });

            modelBuilder.Entity("Bookstore.Models.CategoryModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 11,
                            Category = "Romans"
                        },
                        new
                        {
                            Id = 12,
                            Category = "Komedia"
                        },
                        new
                        {
                            Id = 13,
                            Category = "Science-Fiction"
                        },
                        new
                        {
                            Id = 14,
                            Category = "Przygodowa"
                        },
                        new
                        {
                            Id = 15,
                            Category = "Dziennik"
                        });
                });

            modelBuilder.Entity("Bookstore.Models.OrderModel", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.HasKey("OrderId");

                    b.HasIndex("BookId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Bookstore.Models.OrdersModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AcceptedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdentityUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<bool>("PickedUp")
                        .HasColumnType("bit");

                    b.Property<bool>("ReadyToPickUp")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.HasIndex("OrderId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Bookstore.Models.PickUpTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("TimeToPickUpOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("pickUpTimes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TimeToPickUpOrder = 20
                        });
                });

            modelBuilder.Entity("Bookstore.Models.ShoppingCartItemModel", b =>
                {
                    b.Property<int>("ShoppingCartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("ShoppingCartId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ShoppingCartItemId");

                    b.HasIndex("BookId");

                    b.ToTable("ShoppingCartItems");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "3cc5e8d2-65ef-4d0c-98f9-83073142031b",
                            ConcurrencyStamp = "0d75306c-ecab-49bf-9220-bbe703949a2e",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "3bccac0c-f782-4e4b-b37e-72f27aa87e59",
                            ConcurrencyStamp = "ba2020fe-6f56-439d-9a17-e7dfd2b2d38b",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "581e4962-61c4-40f3-af1e-c2bfb8693984",
                            ConcurrencyStamp = "ee637123-2171-42e8-ab18-759a2c475409",
                            Name = "Menager",
                            NormalizedName = "MENAGER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "69kjc8ab-d412-4a76-bb7d-e971d2d48c46",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "32451f76-6100-4974-9fc3-8eb0b1e94467",
                            Email = "administrator@email.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMINISTRATOR@EMAIL.COM",
                            NormalizedUserName = "ADMINISTRATOR@EMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIiVWu0PFtDPBK/CM1ZFXbpUEKlPaqgf/BZC+cMqfkU5IaQGj9MquOXw4oh/12cppw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2e1e2cea-14fa-4dd2-a4a1-80b438582493",
                            TwoFactorEnabled = false,
                            UserName = "administrator@email.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "69kjc8ab-d412-4a76-bb7d-e971d2d48c46",
                            RoleId = "3cc5e8d2-65ef-4d0c-98f9-83073142031b"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Bookstore.Models.OrderModel", b =>
                {
                    b.HasOne("Bookstore.Models.BookModel", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Bookstore.Models.OrdersModel", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId");

                    b.HasOne("Bookstore.Models.OrderModel", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Bookstore.Models.ShoppingCartItemModel", b =>
                {
                    b.HasOne("Bookstore.Models.BookModel", "Book")
                        .WithMany()
                        .HasForeignKey("BookId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
